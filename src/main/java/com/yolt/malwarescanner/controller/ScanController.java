package com.yolt.malwarescanner.controller;

import com.yolt.malwarescanner.serviceclient.ClamAVServiceClient;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.logstash.logback.marker.Markers;
import nl.ing.lovebird.logging.SemaEvent;
import nl.ing.lovebird.logging.SemaEventLogger;
import org.slf4j.MDC;
import org.slf4j.Marker;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import xyz.capybara.clamav.commands.scan.result.ScanResult;

import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;

import static java.util.stream.Collectors.joining;

@Slf4j
@RestController
@RequestMapping("/scan")
@RequiredArgsConstructor
public class ScanController {

    private static final String ORIGIN_MDC_KEY = "originOfContent";

    private final ClamAVServiceClient clamAVClient;
    private final SemaEventLogger semaEventLogger;

    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<Void> scanFileForMalware(
            @RequestHeader(name = "data-origin") final String origin,
            @RequestParam("file") final MultipartFile file
    ) {
        try {
            MDC.put(ORIGIN_MDC_KEY, origin);

            log.info("Scanning content of size {} from '{}'", file.getSize(), origin);

            long start = System.currentTimeMillis();
            InputStream fileInputStream;
            try {
                fileInputStream = file.getInputStream();
            } catch (IOException e) {
                log.error("Exception occurred while scanning content '{}' from '{}' during {} ms",
                        file.getName(), origin, System.currentTimeMillis() - start, e);
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
            }

            ScanResult scanResult = clamAVClient.scan(fileInputStream);
            log.info("Scanned content from '{}' in {} ms with result {}", origin, System.currentTimeMillis() - start, scanResult.getClass().getSimpleName());

            if (scanResult instanceof ScanResult.VirusFound) {
                String allMalwares = ((ScanResult.VirusFound) scanResult).getFoundViruses()
                        .values()
                        .stream()
                        .flatMap(Collection::stream)
                        .sorted()
                        .collect(joining(", "));

                semaEventLogger.logEvent(new MalwareFoundSemaEvent(origin, allMalwares));
                return ResponseEntity.unprocessableEntity().build();
            }

            return ResponseEntity.ok().build();
        } finally {
            MDC.remove(ORIGIN_MDC_KEY);
        }
    }

    @AllArgsConstructor
    @EqualsAndHashCode
    public static class MalwareFoundSemaEvent implements SemaEvent {

        private final String dataOrigin;
        private final String malwaresFound;

        @Override
        public String getMessage() {
            return String.format("Malware found. Origin: %s, Malware(s): %s", dataOrigin, malwaresFound);
        }

        @Override
        public Marker getMarkers() {
            return Markers.append("dataOrigin", dataOrigin)
                    .and(Markers.append("malwaresFound", malwaresFound));
        }
    }
}
