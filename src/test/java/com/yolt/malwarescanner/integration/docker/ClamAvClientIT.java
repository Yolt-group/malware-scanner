package com.yolt.malwarescanner.integration.docker;

import com.yolt.malwarescanner.util.RtfExploitEncoded;
import lombok.extern.slf4j.Slf4j;
import org.bouncycastle.util.encoders.Base64;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.util.ResourceUtils;
import xyz.capybara.clamav.ClamavClient;
import xyz.capybara.clamav.commands.scan.result.ScanResult;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.nio.file.Files;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

/**
 * Testing the interface to the Docker container directly. Mainly useful when making changes to the container
 * because it stops the running container, removes it and the runs a new instance.
 */
@Slf4j
class ClamAvClientIT extends WithClamAvTestContainer {

    private ClamavClient clamAVClient;

    @BeforeEach
    void setup() {
        clamAVClient = new ClamavClient(clamav.getHost(), clamav.getFirstMappedPort());
        log.info("ClamAV version: {}", clamAVClient.version());
    }

    @Test
    void shouldAcceptPing() {
        assertDoesNotThrow(() -> clamAVClient.ping());
    }

    @Test
    void shouldAcceptPlainFile() {
        byte[] bytes = "I'm no malware, really!".getBytes();

        ScanResult scanResult = clamAVClient.scan(new ByteArrayInputStream(bytes));

        assertThat(scanResult).isInstanceOf(ScanResult.OK.class);
    }

    @Test
    void shouldReportVirus() {
        byte[] bytes = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*".getBytes();

        ScanResult scanResult = clamAVClient.scan(new ByteArrayInputStream(bytes));

        assertThat(scanResult).isInstanceOf(ScanResult.VirusFound.class);
        ScanResult.VirusFound scanResultVirus = (ScanResult.VirusFound) scanResult;
        assertThat(scanResultVirus.getFoundViruses()).hasSize(1);
        assertThat(scanResultVirus.getFoundViruses().get("stream")).containsOnly("Win.Test.EICAR_HDB-1");
    }

    @Test
    void shouldReportVirusInZipFile() throws Exception {
        File file = ResourceUtils.getFile("classpath:eicar.zip");

        ScanResult scanResult = clamAVClient.scan(new ByteArrayInputStream(Files.readAllBytes(file.toPath())));

        assertThat(scanResult).isInstanceOf(ScanResult.VirusFound.class);
        ScanResult.VirusFound scanResultVirus = (ScanResult.VirusFound) scanResult;
        assertThat(scanResultVirus.getFoundViruses()).hasSize(1);
        assertThat(scanResultVirus.getFoundViruses().get("stream")).containsOnly("Win.Test.EICAR_HDB-1");
    }

    @Test
    void shouldReportRTFExploit() {
        ScanResult scanResult = clamAVClient.scan(new ByteArrayInputStream(Base64.decode(RtfExploitEncoded.BASE64ENCODED)));

        assertThat(scanResult).isInstanceOf(ScanResult.VirusFound.class);
        ScanResult.VirusFound scanResultVirus = (ScanResult.VirusFound) scanResult;
        assertThat(scanResultVirus.getFoundViruses()).hasSize(1);
        assertThat(scanResultVirus.getFoundViruses().get("stream")).containsOnly("Rtf.Exploit.CVE_2017_0199-6335035-0");
    }
}
