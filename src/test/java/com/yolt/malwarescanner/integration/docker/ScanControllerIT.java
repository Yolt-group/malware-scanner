package com.yolt.malwarescanner.integration.docker;

import com.yolt.malwarescanner.util.MalwareScanTestCient;
import com.yolt.malwarescanner.util.RtfExploitEncoded;
import org.bouncycastle.util.encoders.Base64;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.util.ResourceUtils;

import java.io.IOException;
import java.util.Arrays;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;

/**
 * Tests scanning of different files, mainly with some test malware present.
 */
@ActiveProfiles("test")
@SpringBootTest(webEnvironment = RANDOM_PORT)
class ScanControllerIT extends WithClamAvTestContainer {

    @LocalServerPort
    private int localServerPort;
    private MalwareScanTestCient malwareScanTestCient;

    @BeforeEach
    void setup() {
        malwareScanTestCient = new MalwareScanTestCient(String.format("http://localhost:%d/malware-scanner/scan", localServerPort));
    }

    @Test
    void testScanNoThreat() {
        assertThat(malwareScanTestCient.scanContent("I'm no threat, really!".getBytes())).isEqualTo(HttpStatus.OK);
    }

    @Test
    void testScanDetectsMalwareInPlainFile() {
        final byte[] bytes = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*".getBytes();

        assertThat(malwareScanTestCient.scanContent(bytes)).isEqualTo(HttpStatus.UNPROCESSABLE_ENTITY);
    }

    @Test
    void testScanDetectsMalwareInZipFile() throws IOException {
        assertThat(malwareScanTestCient.scanFile(ResourceUtils.getFile("classpath:eicar.zip"))).isEqualTo(HttpStatus.UNPROCESSABLE_ENTITY);
    }

    @Test
    void testScanDetectsRtfExploit() {
        assertThat(malwareScanTestCient.scanContent(Base64.decode(RtfExploitEncoded.BASE64ENCODED))).isEqualTo(HttpStatus.UNPROCESSABLE_ENTITY);
    }

    @Test
    void testScanLargeFileNoThreat() {
        byte[] bytes = new byte[20 * 1024 * 1024];
        Arrays.fill(bytes, (byte) 0b10101010);
        assertThat(malwareScanTestCient.scanContent(bytes)).isEqualTo(HttpStatus.OK);
    }
}

