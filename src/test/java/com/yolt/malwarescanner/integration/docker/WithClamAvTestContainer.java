package com.yolt.malwarescanner.integration.docker;

import lombok.SneakyThrows;
import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.DockerImageName;

import java.nio.file.Path;
import java.nio.file.Paths;

import static java.nio.file.Files.readAllLines;

@DisabledIfEnvironmentVariable(
        named = "GITLAB_CI", matches = "true",
        disabledReason = """
        Can't use test containers in CI. To run locally see the instruction in the README.md
        """
)
@DirtiesContext // Because each class gets its own test container. So dynamicPropertySource needs to be reloaded
@Testcontainers(disabledWithoutDocker = true)
abstract class WithClamAvTestContainer {

    private static final Path manifestFile = Paths.get("k8s/base/deployment.yaml");
    @Container
    static final GenericContainer<?> clamav = create();

    @DynamicPropertySource
    static void databaseProperties(DynamicPropertyRegistry registry) {
        registry.add("clamav.host", clamav::getHost);
        registry.add("clamav.port", clamav::getFirstMappedPort);
    }

    @SneakyThrows
    public static GenericContainer<?> create() {
        DockerImageName dockerImage = readAllLines(manifestFile).stream()
                .map(String::trim)
                .filter(line -> line.startsWith("- image: "))
                .map(line -> line.substring("- image: ".length()))
                .filter(image -> image.contains("/clamav:"))
                .map(DockerImageName::parse)
                .findFirst()
                .orElseThrow(() -> new RuntimeException(manifestFile + " did not contain a clamav image?"));

        return new GenericContainer<>(dockerImage).withExposedPorts(3310);
    }
}
