package com.yolt.malwarescanner.integration.local;

import com.jayway.jsonassert.JsonAssert;
import com.yolt.malwarescanner.serviceclient.ClamAVServiceClient;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.autoconfigure.web.server.LocalManagementPort;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import xyz.capybara.clamav.ClamavException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.is;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.doThrow;
import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;

/**
 * Tests the health endpoint which depends on the response from ClamAV container
 */
@ActiveProfiles("test")
@SpringBootTest(webEnvironment = RANDOM_PORT)
class ActuatorMockedClamAvTest {

    @LocalManagementPort
    private Integer managementPort;

    @Autowired
    private TestRestTemplate restTemplate;

    @MockBean
    private ClamAVServiceClient clamAVServiceClient;

    @Test
    void testLiveness() {
        doReturn("V123456").when(clamAVServiceClient).version();

        ResponseEntity<String> entity = restTemplate.getForEntity("http://localhost:" + managementPort + "/actuator/info", String.class);
        assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
        JsonAssert.with(entity.getBody())
                .assertThat("$.ClamAV.running", is(true))
                .assertThat("$.ClamAV.version", is("V123456"));
    }

    @Test
    void testLivenessWhileClamAVNotResponding() {
        doThrow(ClamavException.class).when(clamAVServiceClient).version();

        ResponseEntity<String> entity = restTemplate.getForEntity("http://localhost:" + managementPort + "/actuator/info", String.class);
        assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(entity.getBody()).contains("\"running\":false");
    }

    @Test
    void testReadinessUp() {
        doNothing().when(clamAVServiceClient).ping();

        ResponseEntity<String> entity = restTemplate.getForEntity("http://localhost:" + managementPort + "/actuator/health", String.class);
        assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);
    }

    @Test
    void testReadinessDown() {
        doThrow(ClamavException.class).when(clamAVServiceClient).ping();

        ResponseEntity<String> entity = restTemplate.getForEntity("http://localhost:" + managementPort + "/actuator/health", String.class);
        assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);
    }
}



