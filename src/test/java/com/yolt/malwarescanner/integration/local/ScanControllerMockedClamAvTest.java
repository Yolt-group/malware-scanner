package com.yolt.malwarescanner.integration.local;

import com.yolt.malwarescanner.controller.ScanController.MalwareFoundSemaEvent;
import com.yolt.malwarescanner.serviceclient.ClamAVServiceClient;
import com.yolt.malwarescanner.util.MalwareScanTestCient;
import net.logstash.logback.marker.Markers;
import nl.ing.lovebird.logging.SemaEventLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ActiveProfiles;
import xyz.capybara.clamav.commands.scan.result.ScanResult;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;

/**
 * Tests scanning of different files, mainly with some test malware present.
 */
@ActiveProfiles("test")
@SpringBootTest(webEnvironment = RANDOM_PORT)
class ScanControllerMockedClamAvTest {

    @LocalServerPort
    private int localServerPort;
    @MockBean
    private ClamAVServiceClient clamAVServiceClient;
    @MockBean
    private SemaEventLogger semaEventLogger;
    @Captor
    private ArgumentCaptor<MalwareFoundSemaEvent> malwareFoundSemaEventArgumentCaptor;

    private MalwareScanTestCient malwareScanTestCient;

    @BeforeEach
    void setup() {
        malwareScanTestCient = new MalwareScanTestCient(String.format("http://localhost:%d/malware-scanner/scan", localServerPort));
    }

    @Test
    void testScanNoMalware() {
        when(clamAVServiceClient.scan(Mockito.any(InputStream.class))).thenReturn(ScanResult.OK.INSTANCE);

        assertThat(malwareScanTestCient.scanContent("Healthy".getBytes())).isEqualTo(HttpStatus.OK);

        verify(clamAVServiceClient).scan(Mockito.any(InputStream.class));
        verify(semaEventLogger, never()).logEvent(any());
    }

    @Test
    void testScanMalwareFound() {
        Map<String, List<String>> malwareFound = Map.of(
                "stream", List.of("some-malware", "another-malware"),
                "scan", List.of("bad-malware")
        );
        when(clamAVServiceClient.scan(any())).thenReturn(new ScanResult.VirusFound(malwareFound));

        assertThat(malwareScanTestCient.scanContent("Infected".getBytes())).isEqualTo(HttpStatus.UNPROCESSABLE_ENTITY);

        verify(semaEventLogger).logEvent(malwareFoundSemaEventArgumentCaptor.capture());
        MalwareFoundSemaEvent event = malwareFoundSemaEventArgumentCaptor.getValue();
        assertThat(event.getMessage()).isEqualTo("Malware found. Origin: testing, Malware(s): another-malware, bad-malware, some-malware");
        assertThat(event.getMarkers()).isEqualTo(
                Markers.append("dataOrigin", "testing")
                        .and(Markers.append("malwaresFound", "another-malware, bad-malware, some-malware")));
    }

    @Test
    void testScanEmptyFile() {
        assertThat(malwareScanTestCient.scanContent(null)).isEqualTo(HttpStatus.BAD_REQUEST);
    }
}
