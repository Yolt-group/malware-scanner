package com.yolt.malwarescanner.util;

import lombok.RequiredArgsConstructor;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;

@RequiredArgsConstructor
public class MalwareScanTestCient {

    private final RestTemplate restTemplate = new RestTemplate();
    private final String scanEndpointUrl;

    public HttpStatus scanFile(final File file) throws IOException {
        return scanContent(Files.readAllBytes(file.toPath()));
    }

    public HttpStatus scanContent(final byte[] content) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        headers.set("data-origin", "testing");

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        if (content != null) {
            body.add("file", new MultipartInputStreamFileResource(new ByteArrayInputStream(content), "file"));
        }

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        try {
            ResponseEntity<String> response = restTemplate.postForEntity(scanEndpointUrl, requestEntity, String.class);
            return response.getStatusCode();
        } catch (HttpClientErrorException ex) {
            return ex.getStatusCode();
        }
    }

    static class MultipartInputStreamFileResource extends InputStreamResource {

        private final String filename;

        MultipartInputStreamFileResource(InputStream inputStream, String filename) {
            super(inputStream);
            this.filename = filename;
        }

        @Override
        public String getFilename() {
            return this.filename;
        }

        @Override
        public long contentLength() {
            return -1; // we do not want to generally read the whole stream into memory ...
        }
    }
}
